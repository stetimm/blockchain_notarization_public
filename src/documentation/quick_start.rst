.. _Quick Start:

**********
Quick Start Guide
**********

For now, there are two things to explore:

1. A basic example that allows you to notarize and verify files on your disk.
2. A simple oTree app that notarizes user input, as well as an example of how one would verify the raw data generated by oTree in bulk.

It is recommended that you start with the basic example to understand how things work and then continue to run the oTree example.

To set things up, you always need to do the following first:

    1. Create a conda environment from the ``environment.yml`` file. To do so, run: ``conda env create -f environment.yml``
    2. Activate the environment with: ``conda activate blockchain_notarization``
    3. Save the ``blockchain_config.py`` file that was separately shared with you in the ``src`` folder.


Basic Example - Walkthrough
===============
The basic example is about notarizing and verifying files on disk. It is command line based and primitive but does the trick.
You should have a file at hand that you can easily change (e.g., a .csv, .txt file or similar). Obviously, you would start with notarization.

**Notarization**

    1. Run ``python src/examples/example_basic.py``. Enter ``1`` for notarization.
    2. Account address and private key will be shared separately with you as part of the ``blockchain_config.py`` file. You can take the relevant information from there.
    3. Enter the full path to your file (that is, start with ``C:\...`` or ``/Users/...``).
    4. Wait a bit for the transaction to be placed.
    5. If everything works, you should get confirmation (including a transaction hash and a URL) that a transaction was saved on the blockchain. You can look it up via the URL provided in the command line.

That's it, your file is notarized.

**Verification**

    6. After you have notarized your file successfully, you should ensure that the verification works.
    7. Run ``python src/examples/example_basic.py`` again, select verification by entering ``2``.
    8. Enter the full file path and the transaction hash you got in step 5 above.
    9. You should get confirmation that your file is unchanged.
    10. To see what happens when you change the content of the file, edit the file and run through the verification (starting from step 6) again.


oTree Example - Walkthrough
===============
There are two parts to the oTree example: The notarization within the oTree app and the verification of raw data generated by oTree.
For people completely unfamiliar with oTree this walkthrough may be a bit obscure. Bare with me ;-)

**Notarization within oTree**

The oTree app is run locally. Make sure you have the ``blockchain_notarization`` environment activated.

    1. Navigate to the oTree project folder: ``cd src/otree_code``.

    2. Make sure that in file ``src/otree_code/otree_example/models.py`` the following parameter is set to ``True`` in ``class Constants(BaseConstants)``: ``blockchain_notarization = True``

    3. Start the local devserver by running: ``otree devserver``.

    4. Open your browser and go to ``http://localhost:8000/``.

    5. Click on "oTree Notarization Example".

    6. Open the "Single-Use Link" at the bottom of the page in a new tab. This directs you to the view subjects would see.

    7. Run through the experiment. It is very rudimentary and essentially only consists of one table that needs to be filled out.

    8. Once you reach the results page, you can go to back to the page you opened in step 5, there is a tab underneath the title "oTree Notarization Example" entitled "Data". Click it.

    9. You see the results of the experiment you just run, importantly, there is a column ``tx_hash``. This is the transaction hash of the transaction that saved your data. Unfortunately, it is oftentimes not completely displayed in this view. In order to access the full tx_hash you have two options, you can either download the data by clicking on "Plain" in the bottom right of the screen or you can inspect the output in the console from which you started the devserver in Step 3.

    10. Go to `Etherscan <https://ropsten.etherscan.io/>`_ and search for the ``tx_hash``.

    11. When you found the transaction, click on "Click to see More" at the bottom. In row "Input Data" click on "View Input as" and select ``UTF-8``. You should see the experimental data and a hash.

Now you have seen how notarization within oTree works.


**Verification of oTree Raw Data**

To show you how verification of oTree raw data works, an example was prepared.

    1. Inspect the file ``src/examples/example_file_otree.csv``. It has data on 3 participants who ran through the oTree example. Importantly, this includes their decisions and a ``tx_hash``.
    2. The data of one of the participants has been altered. To find out which, run: ``python src/examples/example_verification_otree.py``.
    3. The output is a the "Verified" column of the dataset: it has True/False values in it. True indicates no change to the data since it was placed on blockchain.
    4. You can play around and change the data and run the example script again to see what happens.

This should show you how changes to data after they have been created can be easily detected.